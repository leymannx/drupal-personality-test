<?php
/**
 * Implements hook_node_info()
 */
function personality_test_node_info() {
  return array(
    // machine_name
    'personality_test' => array(
      'name' => t('Personality Test'),
      'base' => 'personality_test', // name of module
      'description' => t('Create custom personality tests.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
    )
  );
}

/**
 * Implements hook_form() // that's the node form, actual quiz form see below
 */
function personality_test_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_entity_info_alter() // for creating a new view mode
 */
function personality_test_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['result'] = array(
    'label' => t('Result'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_view_mode_alter() // for switching the view mode
 */
function personality_test_entity_view_mode_alter(&$view_mode, $context) {
  if (!user_is_anonymous() && $context['entity_type'] == 'node' && $context['entity']->type == 'personality_test' && isset($_SESSION['quiz'])) {
    $view_mode = 'result';
  }
}

/**
 * Implements hook_node_view() // to call our quiz form
 */
function personality_test_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'personality_test' && $view_mode != 'result') {
    $form = drupal_get_form('personality_test', $node);
    $node->content['personality_test'] = array(
      '#markup' => drupal_render($form),
      '#weight' => 2 // display before form
    );
  } elseif ($node->type == 'personality_test' && $view_mode == 'result') {
    $form = drupal_get_form('personality_test_reset_button');
    $node->content['reset_button'] = array(
      '#markup' => drupal_render($form),
      '#weight' => 10 // display after result text
    );
  }
  // $results_field_id = $node->personality_test_results[LANGUAGE_NONE][0]['value'];
  // $results = entity_load('field_collection_item', array($results_field_id));
  // dpm($results, 'RESULTS');
  // dpm($node, 'NODE');
}

/**
 * Implements hook_node_view() // to unset second title display in result view
 */
function personality_test_preprocess_node(&$vars) {
  // maybe ask for more conditions here
  if ($vars['elements']['#view_mode'] == 'result') {
    $vars['title'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_field() // to hide unwanted results from display
 */
function personality_test_preprocess_field(&$vars) {
  // if($vars['element']['#field_name'] == "field_your_fc_field"){
  //   $fcs = array();
  //   foreach (element_children($vars['element']) as $key) {
  //     $fcs[] = array_pop($vars['element'][$key]['entity']['field_collection_item']);
  //   }
  //   // now you have all your fcs pulled out of that nasty array
  //   foreach ($fcs as $fc) {
  //     # code... that 
  //   }
 
  //   // I would recommend overrideing items markup for whatever black magic you desire
  //   $vars['items'] = array(
  //     '#markup' => "Whatever you need to render",
  //   );  
  // }
  // if (isset($vars['element']['#field_name'] = 'personality_test_results') && TRUE == TRUE) {

  // }

  // array_push($vars['classes_array'], 'action');

  // unset($vars['items'][0]['entity']['field_collection_item'][86]['personality_test_result_a']);
  // TO DO: match results display to score
  dpm($vars);
}

/**
 * Our actual form ...
 */
function personality_test($form, &$form_state, $node) {
  // get field collection items from node
  $items = $node->personality_test_questions[LANGUAGE_NONE];
  // call helper to build form elements from field collection items
  $elements = _personality_test_build_form($items);
  foreach ($elements as $element => $controls) {
    $form[$element] = $controls;
  }
  // append submit button
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Evaluation'),
  );
  return $form;
}

function personality_test_validate($form, &$form_state) {
  // dpm($form_state, 'FORM STATE');

  $results = array();
  if (isset($form_state['values'])) {
    foreach ($form_state['values'] as $field => $value) {
      if (preg_match('/question/', $field)) {
        $value = intval($value);
        $results[$field] = $value;
      }
    }
  }
  $number_of_questions = count($results);
  $results_sum = array_sum($results);
  $score = $results_sum / $number_of_questions;
  dpm($results, 'RESULTS');
  dpm($number_of_questions, 'NUMBER');
  dpm($results_sum, 'SUM');
  dpm($score, 'SCORE');

  $_SESSION['quiz'] = $score;
}

function personality_test_submit($form, &$form_state) {

  
}

/**
 * ... and a reset button
 */
function personality_test_reset_button($form, &$form_state) {
  $form['reset_button'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
  );
  return $form;
}

function personality_test_reset_button_submit($form, &$form_state) {
  unset($_SESSION['quiz']);
}

/**
 * Helper function to build form elements from field collection items
 */
function _personality_test_build_form($items) {
  $i = 0;
  foreach ($items as $item) {
    $i++;
    $index = sprintf("%02d", $i);
    // get questions, get options
    $item_id = $item['value'];
    $entity = entity_load('field_collection_item', array($item_id));
    $question = $entity[$item_id]->personality_test_question_body[LANGUAGE_NONE][0]['value'];
    $option_items = $entity[$item_id]->personality_test_answers[LANGUAGE_NONE];
    $options = _personality_test_options($option_items);
    // put everything together
    $elements['question_'.$index] = array(
      '#type' => 'radios',
      '#title' => $index . '. ' . $question,
      '#options' => $options
    );
  }
  return $elements;
}

/**
 * Helper function to build radio options from field collection items
 */
function _personality_test_options($option_items) {
  $options = array();
  foreach ($option_items as $item) {
    $item_id = $item['value'];
    $entity = entity_load('field_collection_item', array($item_id));
    $answer = $entity[$item_id]->personality_test_answer_body[LANGUAGE_NONE][0]['value'];
    $key = $entity[$item_id]->personality_test_answer_map[LANGUAGE_NONE][0]['value'];
    $options[$key] = $answer;
  }
  return $options;
}


