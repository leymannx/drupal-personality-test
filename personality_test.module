<?php
/**
 * Implements hook_node_info()
 */
function personality_test_node_info() {
  return array(
    // machine_name
    'personality_test' => array(
      'name' => t('Personality Test'),
      'base' => 'personality_test', // name of module
      'description' => t('Create custom personality tests.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
    )
  );
}

/**
 * Implements hook_form() // that's the node form, actual quiz form see below
 */
function personality_test_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_entity_info_alter() // for creating a new view mode
 */
function personality_test_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['result'] = array(
    'label' => t('Result'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_view_mode_alter() // for switching the view mode
 */
function personality_test_entity_view_mode_alter(&$view_mode, $context) {
  if (!user_is_anonymous() && $context['entity_type'] == 'node' && $context['entity']->type == 'personality_test' && isset($_SESSION['quiz'])) {
    $view_mode = 'result';
  }
}

/**
 * Implements hook_node_view() // to call our quiz form
 */
function personality_test_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'personality_test' && $view_mode != 'result') {
    $form = drupal_get_form('personality_test', $node);
    $node->content['personality_test'] = array(
      '#markup' => drupal_render($form),
    );
  } elseif ($node->type == 'personality_test' && $view_mode == 'result') {
    $form = drupal_get_form('personality_test_reset_button');
    $node->content['reset_button'] = array(
      '#markup' => drupal_render($form),
      '#weight' => 2 // display after result text
    );
  }
}

/**
 * Implements hook_node_view() // to unset second title display in result view
 */
function personality_test_preprocess_node(&$vars) {
  // maybe do some more requests ...
  if ($vars['elements']['#view_mode'] == 'result') {
    $vars['title'] = FALSE;
  }
}

/**
 * Our actual form
 */
function personality_test($form, &$form_state, $node) {
  // get field collection items from node
  $items = $node->personality_test_questions[LANGUAGE_NONE];
  // call helper to build form elements from field collection items
  $elements = _personality_test_build_form($items);
  foreach ($elements as $element => $controls) {
    $form[$element] = $controls;
  }
  // append submit button
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Evaluation'),
  );
  return $form;
}

function personality_test_submit($form, &$form_state) {
  $_SESSION['quiz'] = 'test';
}

function personality_test_reset_button($form, &$form_state) {
  $form['reset_button'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
  );
  return $form;
}

function personality_test_reset_button_submit($form, &$form_state) {
  unset($_SESSION['quiz']);
}

/**
 * Helper function to build form elements from field collection items
 */
function _personality_test_build_form($items) {
  $i = 0;
  foreach ($items as $item) {
    $i++;
    $index = sprintf("%02d", $i);
    // get questions, get options
    $item_id = $item['value'];
    $entity = entity_load('field_collection_item', array($item_id));
    $question = $entity[$item_id]->personality_test_question_body[LANGUAGE_NONE][0]['value'];
    $option_items = $entity[$item_id]->personality_test_answers[LANGUAGE_NONE];
    $options = _personality_test_options($option_items);
    // put everything together
    $elements['question_'.$index] = array(
      '#type' => 'radios',
      '#title' => $question,
      '#options' => $options
    );
  }
  return $elements;
}

/**
 * Helper function to build radio options from field collection items
 */
function _personality_test_options($option_items) {
  $options = array();
  foreach ($option_items as $item) {
    $item_id = $item['value'];
    $entity = entity_load('field_collection_item', array($item_id));
    $answer = $entity[$item_id]->personality_test_answer_body[LANGUAGE_NONE][0]['value'];
    $key = $entity[$item_id]->personality_test_answer_map[LANGUAGE_NONE][0]['value'];
    $options[$key] = $answer;
  }
  return $options;
}


